generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Galeria {
  id                 Int        @id @default(autoincrement())
  nombre             String
  descripcion        String?
  fechaRegistro      DateTime   @default(now())
  fechaActualizacion DateTime   @updatedAt
  categoriaAcronimo  String?
  usuario            String
  url                String[]
  categoria          Categoria? @relation(fields: [categoriaAcronimo], references: [acronimo])

  @@map("galeria")
}

model Categoria {
  id          Int        @id @default(autoincrement())
  nombre      String
  acronimo    String     @unique
  descripcion String?
  imagen      String
  galeria     Galeria[]
  productos   Producto[]

  @@map("categoria")
}

model Equipo {
  id                 Int      @id @default(autoincrement())
  nombre             String
  descripcion        String?
  fechaRegistro      DateTime @default(now())
  fechaActualizacion DateTime @updatedAt

  @@map("equipo")
}

model Qr {
  id                 Int      @id @default(autoincrement())
  codigo             String?  @unique
  valor              String?  @unique
  estatus            Status   @default(inactive)
  productoId         Int      @unique
  fechaRegistro      DateTime @default(now())
  fechaActualizacion DateTime @updatedAt
  producto           Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)

  @@map("qr")
}

model Producto {
  id                 Int       @id @default(autoincrement())
  nombre             String
  descripcion        String
  categoria          String
  cepa               String
  thc                Float
  cbd                Float
  imagen             String[]
  aroma              String
  efecto             String
  fabricante         String
  pais               String
  proveedor          String
  precio             Float?
  peso               Float?
  fechaCosecha       DateTime?
  fechaEnvasado      DateTime?
  fechaCaducidad     DateTime?
  lote               String?
  certificado        String?
  notas              String?
  usuario            String
  fechaRegistro      DateTime  @default(now())
  fechaActualizacion DateTime  @updatedAt
  categoria_         Categoria @relation(fields: [categoria], references: [acronimo], onDelete: Cascade)
  qr                 Qr?

  @@map("producto")
}

model User {
  id            String             @id @default(dbgenerated("nanoid()")) @db.Char(12)
  name          String
  last_name     String?
  email         String             @unique
  avatar        String?
  bio           String?            @default("")
  created_at    DateTime           @default(now()) @db.Timestamptz(6)
  organizations UserOrganization[]

  @@map("users")
}

model Organization {
  id          String             @id @default(dbgenerated("nanoid()")) @db.Char(12)
  name        String
  description String?
  users       UserOrganization[]
  created_at  DateTime           @default(now()) @db.Timestamptz(6)

  @@map("organizations")
}

model UserOrganization {
  id             String       @id @default(dbgenerated("nanoid()")) @db.Char(12)
  role           Role
  userId         String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@map("userOrganizations")
}

model Category {
  id            String   @id @default(dbgenerated("nanoid()")) @db.Char(12)
  name          String
  description   String?
  icon          String?
  subcategories Json[]   @db.Json
  created_at    DateTime @default(now()) @db.Timestamptz(6)

  @@map("categories")
}

model Gallery {
  id          String   @id @default(dbgenerated("nanoid()")) @db.Char(12)
  name        String
  description String?
  url         String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  @@map("galleries")
}

model Product {
  id          String   @id @default(dbgenerated("nanoid()")) @db.Char(12)
  name        String
  description String?
  images      String[]
  qrs         Code?
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  @@map("products")
}

model Code {
  id         String   @id @default(dbgenerated("nanoid()")) @db.Char(12)
  value      String
  status     Status   @default(inactive)
  products   Product  @relation(fields: [id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@map("qrs")
}

enum Role {
  admin
  user
}

enum Status {
  active
  inactive
  destroied
}
